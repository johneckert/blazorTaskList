@using System;

@page "/list"

<div class="list-box">
    <h1>@Title</h1>
    <ul>
        @foreach (var listItem in listItems) {
            <li class="@CrossedOut(listItem.ID)" onclick="@(() => ToggleComplete(listItem.ID))">@listItem.Content</li>
        }
    </ul>
    <div class="add-item-container">
        <input placeholder="" bind="@newItem" />
        <button class="add-item" onclick="@AddItem"><span>+</span></button>
    </div>
</div>

@functions {
    [Parameter]
    private string Title { get; set; }
    
    private string newItem;

    private IList<ListItem> listItems = new List<ListItem>();

    
    private void AddItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            listItems.Add(new ListItem { Content = newItem, Complete = false, ID = Guid.NewGuid() });
            newItem = string.Empty;
        }
    }

    private string CrossedOut(Guid id) {
        var CurrentItem = listItems.First(item => item.ID == id);
        if (CurrentItem.Complete) {
            return "strike-through";
        }
        else {
            return "";
        }
    }

    private void ToggleComplete(Guid id) {
        var CurrentItem = listItems.First(item => item.ID == id);
        var oldIndex = listItems.IndexOf(CurrentItem);
        var listLength = 0;
        foreach (var el in listItems ) {
            listLength++;
        }

        CurrentItem.Complete = !CurrentItem.Complete;

        if (CurrentItem.Complete) {
            listItems.RemoveAt(oldIndex);
            listItems.Insert(listLength - 1, CurrentItem);
        }
        else {
            listItems.RemoveAt(oldIndex);
            listItems.Insert(0, CurrentItem);
        }
    }

    public class ListItem {
        public Guid ID {get; set; }
        public string Content { get; set; }
        public bool Complete { get; set; }
    }

}